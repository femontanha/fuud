{"version":3,"sources":["constants.js","lib/escapeRegExp.js","components/SpotifyTimer.js","components/FiltersButton.js","components/FilterByName.js","components/FilterByCountry.js","components/FilterByDate.js","lib/formatDate.js","components/FilterByLimit.js","components/Filters.js","services/filters.js","enum/filters.js","components/Playlist.js","components/Pagination.js","pages/Home.js","services/playlist.js","lib/parsePlaylistUrl.js","pages/Login.js","lib/getTokenFromHash.js","pages/NotFound.js","components/PrivateRoute.js","components/SwitchTheme.js","components/Header.js","components/App.js","serviceWorker.js","index.js","static/404.png","static/spotifood.svg"],"names":["REDIRECT_URI","concat","process","SPOTIFY_AUTHORIZE","COUNTDOWN_INTERVAL","REFRESH_INTERVAL","escapeRegExp","string","replace","SpotifyTimer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","countdown","tick","bind","assertThisInitialized","_this2","timer","setInterval","setState","clearInterval","react_default","a","createElement","className","PureComponent","FiltersButton","_ref","onClick","show","triangleCSS","classNames","filters-button__triangle--inverted","FilterByName","value","event","target","onChange","id","htmlFor","type","handleChange","FilterByCountry","key","_this$props","name","values","map","locale","FilterByDate","startDate","moment","date","format","formatDate","es","selected","handleFormatDate","FilterByLimit","parseInt","isNaN","validation","min","max","Filters","filters","loaded","fetch","then","rsp","status","json","data","catch","err","console","error","_this3","components_FilterByName","handleFilterByName","options","components_FilterByCountry","assign","filtersValues","country","handleFilter","components_FilterByDate","components_FilterByLimit","limit","Playlist","playlist","list","href","external_urls","spotify","rel","src","images","url","alt","Pagination","next","previous","total","Home","filteredPlaylists","filter","item","toLowerCase","search","message","timestamp","offset","showFilters","pagination","refreshRef","isFiltersLoaded","isPlaylistsLoaded","initRefreshPlaylists","playlistAPI","params","urlParams","accessToken","localStorage","getItem","headers","Authorization","playlistService","removeItem","history","push","toast","_data$playlists","playlists","items","objectSpread","isLoaded","defineProperty","split","_qs$parse","qs","parse","parsePlayListUrl","_this$state","homeFiltersCSS","is-loaded","homePlaylistsCSS","components_SpotifyTimer","lib","autoClose","components_Filters","handleLoadingFilters","components_FiltersButton","handleFiltersButton","components_Playlist","components_Pagination","handlePagination","Login","hasRedirect","hash","from","location","newToken","setItem","Redirect","to","NotFound","bg","Link","PrivateRoute","Component","component","rest","objectWithoutProperties","Route","render","pathname","handleClick","document","body","classList","toggle","SwitchTheme","Header","logo","components_SwitchTheme","App","BrowserRouter","components_Header","Switch","path","components_PrivateRoute","exact","React","Boolean","window","hostname","match","ReactDOM","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.f1715fd7.chunk.js","sourcesContent":["export const APP_NAME = 'Spotifood';\n// Spotify\nexport const SPOTIFY_URL = 'https://www.spotify.com';\nexport const SPOTIFY_FEATURED_PLAYLIST = 'https://api.spotify.com/v1/browse/featured-playlists'\nexport const REDIRECT_URI = process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : `https://femontanha.github.io${process.env.PUBLIC_URL}`;\nexport const SPOTIFY_AUTHORIZE =`https://accounts.spotify.com/authorize?client_id=4ad4e141368348058f86c56f318549f7&response_type=token&redirect_uri=${ REDIRECT_URI }`\nexport const REFRESH_INTERVAL = 30000;\nexport const COUNTDOWN_INTERVAL = REFRESH_INTERVAL / 1000;\n// Filter\nexport const FILTERS_ENDPOINT = 'https://www.mocky.io/v2/5a25fade2e0000213aa90776';\n","export default (string) => string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n","import React, { PureComponent } from 'react';\nimport { REFRESH_INTERVAL, COUNTDOWN_INTERVAL } from '../constants';\nimport '../styles/spotify-timer.scss';\n\nclass SpotifyTimer extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            countdown: COUNTDOWN_INTERVAL,\n        }\n\n        this.tick = this.tick.bind(this);\n    }\n\n    componentDidMount() {\n        this.timer = setInterval(this.tick, 1000);\n        this.countdown = setInterval(() => {\n            this.setState({\n                countdown: COUNTDOWN_INTERVAL,\n            });\n        }, REFRESH_INTERVAL);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n        clearInterval(this.countdown);\n    }\n\n    tick() {\n        const countdown = this.state.countdown;\n        this.setState({ countdown: countdown - 1 });\n    }\n\n    render() {\n        return (<p className=\"spotify-timer\">\n            As playlists serão atualizadas em: <span className=\"spotify-timer__seconds\">{ this.state.countdown }</span></p>\n        );\n    }\n};\n\nexport default SpotifyTimer;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport '../styles/filters-button.scss';\n\nconst FiltersButton = ({ onClick, show }) => {\n\n    const triangleCSS = classNames(\n        'filters-button__triangle',\n        { 'filters-button__triangle--inverted': show }\n    );\n\n    return (\n        <button className=\"filters-button\" onClick={ onClick }>\n            Filtrar Playlists\n            <i className={ triangleCSS } />\n        </button>\n    );\n};\n\nFiltersButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    show: PropTypes.bool.isRequired,\n};\n\nexport default FiltersButton;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FilterByName extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: '',\n        }\n    }\n\n    handleChange(event) {\n        const value = event.target.value;\n        this.setState({ value });\n        this.props.onChange(value);\n    }\n\n    render() {\n        const {\n            id,\n        } = this.props;\n\n        return (\n            <fieldset className=\"filters-form__fieldset\">\n                <label htmlFor={ id } className=\"filters-form__label\">\n                    Filtrar por Nome\n                </label>\n                <input\n                    id={ id }\n                    type=\"text\"\n                    className=\"filters-form__name-input\"\n                    value={ this.state.value }\n                    onChange={ this.handleChange.bind(this) }\n                />\n            </fieldset>\n        );\n    }\n};\n\nFilterByName.propTypes = {\n    id: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default FilterByName;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FilterByCountry extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: this.props.value,\n        }\n    }\n\n    handleChange(event) {\n        const key = event.target.id;\n        const value = event.target.value;\n\n        this.setState({ value })\n        this.props.onChange(key, value);\n    }\n\n    render() {\n        const {\n            id,\n            name,\n            values,\n        } = this.props;\n\n        return (\n            <fieldset className=\"filters-form__fieldset\">\n                <label htmlFor={ id } className=\"filters-form__label\">\n                    Escolha o <span>{ name }</span>\n                </label>\n                <select\n                    id={ id }\n                    name={ name }\n                    onChange={ this.handleChange.bind(this) }\n                    value={ this.state.value }\n                    className=\"filters-form__input\"\n                >\n                    { values.map(locale => <option key={ locale.value } value={ locale.value }>{ locale.name }</option>) }\n                </select>\n            </fieldset>\n        );\n    }\n};\n\nFilterByCountry.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    values: PropTypes.arrayOf(PropTypes.shape({\n        value: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n    })),\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default FilterByCountry;\n","import React, { PureComponent } from 'react';\nimport DatePicker from 'react-datepicker';\nimport PropTypes from 'prop-types';\nimport formatDate from '../lib/formatDate';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport moment from 'moment';\n\nclass FilterByDate extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            startDate: moment(),\n        }\n    }\n\n    handleFormatDate(date) {\n        this.setState({ startDate: date })\n        this.props.onChange(this.props.id, formatDate(date));\n    }\n\n    render () {\n        return (\n            <fieldset className=\"filters-form__fieldset\">\n                <label htmlFor={ this.props.id } className=\"filters-form__label\">\n                    Escolha a <span>{ this.props.name }</span>\n                </label>\n                <DatePicker\n                    selected={ this.state.startDate }\n                    onChange={ this.handleFormatDate.bind(this) }\n                    className=\"filters-form__input\"\n                />\n            </fieldset>\n        );\n    }\n}\n\nFilterByDate.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    validation: PropTypes.shape({\n        entityType: PropTypes.string,\n        pattern: PropTypes.string,\n        primitiveType: PropTypes.string.isRequired,\n    }),\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default FilterByDate;\n","import moment from 'moment';\n\n// TODO: Check parameters\n// TODO: Add pattern parameter\nexport default (date) => {\n    return moment(date).format();\n};\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FilterByLimit extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: this.props.value,\n        }\n    }\n\n    handleChange(event) {\n        const key = event.target.id;\n        const value = parseInt(event.target.value);\n\n        if (isNaN(value)) return;\n\n        this.setState({ value })\n        this.props.onChange(key, value);\n    }\n\n    render() {\n        const {\n            id,\n            name,\n            validation,\n        } = this.props;\n\n        return (\n            <fieldset className=\"filters-form__fieldset\">\n                <label htmlFor={ id } className=\"filters-form__label\">\n                    Escolha a <span>{ name }</span>\n                </label>\n                <input\n                    id={ id }\n                    type=\"number\"\n                    min={ validation.min }\n                    max={ validation.max }\n                    value={ this.state.value }\n                    onChange={ this.handleChange.bind(this) }\n                    className=\"filters-form__input\"\n                />\n            </fieldset>\n        );\n    }\n};\n\nFilterByLimit.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    validation: PropTypes.shape({\n        min: PropTypes.number,\n        max: PropTypes.number,\n        primitiveType: PropTypes.string.isRequired,\n    }),\n    value: PropTypes.number.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default FilterByLimit;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport getFilters from '../services/filters';\nimport FilterByName from './FilterByName';\nimport FilterByCountry from './FilterByCountry';\nimport FilterByDate from './FilterByDate';\nimport FilterByLimit from './FilterByLimit';\nimport * as enumFilters from '../enum/filters';\nimport '../styles/filters.scss';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass Filters extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filters: [],\n        }\n\n        this.props.loaded(false);\n    }\n\n    componentDidMount() {\n        return getFilters()\n            .then(rsp => {\n                // TODO: handle other status - 401 - 404\n                if (rsp.status === 200) return rsp.json();\n            })\n            .then(data => {\n                const filters = data.filters || [];\n                this.setState({ filters })\n                this.props.loaded(true);\n            })\n            .catch(err => console.error(err));\n    }\n\n    render() {\n        // TODO: Could use https://jaredpalmer.com/formik/\n        return(\n            <form className=\"filters-form\">\n                <FilterByName\n                    id={ 'name' }\n                    onChange={ this.props.handleFilterByName }\n                />\n                {\n                    this.state.filters.map(options => {\n                        switch (options.id) {\n                            case enumFilters.COUNTRY:\n                                return (\n                                    <FilterByCountry\n                                        { ...options }\n                                        key={ options.id }\n                                        value={ this.props.filtersValues.country }\n                                        onChange={ this.props.handleFilter }\n                                    />\n                                );\n                            case enumFilters.TIMESTAMP:\n                                return (\n                                    <FilterByDate\n                                        { ...options }\n                                        key={ options.id }\n                                        onChange={ this.props.handleFilter }\n                                    />\n                                );\n                            case enumFilters.LIMIT:\n                                return (\n                                    <FilterByLimit\n                                        { ...options }\n                                        key={ options.id }\n                                        value={ this.props.filtersValues.limit }\n                                        onChange={ this.props.handleFilter }\n                                    />\n                                );\n                            default:\n                                return null;\n                        }\n                    })\n                }\n            </form>\n        );\n    }\n};\n\nFilters.propTypes = {\n    handleFilter: PropTypes.func.isRequired,\n    handleFilterByName: PropTypes.func.isRequired,\n    filtersValues: PropTypes.shape({\n        country: PropTypes.string.isRequired,\n        timestamp: PropTypes.string.isRequired,\n        limit: PropTypes.number.isRequired,\n        offset: PropTypes.number.isRequired\n    }),\n    loaded: PropTypes.func.isRequired,\n};\n\nexport default Filters;\n","import { FILTERS_ENDPOINT } from '../constants';\nexport default () => fetch(FILTERS_ENDPOINT);\n","export const LOCALE = 'locale';\nexport const COUNTRY = 'country';\nexport const TIMESTAMP = 'timestamp';\nexport const LIMIT = 'limit';\nexport const OFFSET = 'offset';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/playlist.scss';\n\nconst Playlist = ({ playlist }) => ((\n    <div className=\"playlist-grid\">\n        {\n            playlist.map(list => {\n                return (\n                    <a\n                        href={ list.external_urls.spotify }\n                        className=\"playlist-item\"\n                        key={ list.id }\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        <img src={ list.images[0].url } alt={ list.name } />\n                        <p className=\"playlist-item__name\">\n                            { list.name }\n                        </p>\n                    </a>\n                );\n            })\n        }\n    </div>\n));\n\nPlaylist.propTypes = {\n    playlist: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        external_urls: PropTypes.shape({\n            spotify: PropTypes.string.isRequired,\n        }),\n        name: PropTypes.string.isRequired,\n        images: PropTypes.arrayOf(PropTypes.shape({\n            height: PropTypes.number.isRequired,\n            width: PropTypes.number.isRequired,\n            url: PropTypes.string.isRequired,\n        })),\n    })),\n};\n\nexport default Playlist;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/pagination.scss';\n\nconst Pagination = ({\n    limit,\n    next,\n    previous,\n    total,\n    onClick,\n}) => {\n    return (\n        <div className=\"pagination\">\n            <div className=\"pagination__btn-holder\">\n                {\n                    previous &&\n                    <button className=\"pagination__btn\" onClick={ onClick.bind(null, previous) }>Anterior</button>\n                }\n            </div>\n            {\n                total > 0 && limit < total &&\n                <span>Total de <strong>{ total }</strong> playlists</span>\n            }\n            <div className=\"pagination__btn-holder\">\n                {\n                    next &&\n                    <button className=\"pagination__btn\" onClick={ onClick.bind(null, next) }>Próxima</button>\n                }\n            </div>\n        </div>\n    );\n};\n\nPagination.propTypes = {\n    limit: PropTypes.number.isRequired,\n    next: PropTypes.string,\n    previous: PropTypes.string,\n    total: PropTypes.number.isRequired,\n    onClick: PropTypes.func.isRequired,\n};\n\nexport default Pagination;\n","import React, { PureComponent } from 'react';\nimport moment from 'moment';\nimport classNames from 'classnames';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport playlistService from '../services/playlist';\nimport parsePlayListUrl from '../lib/parsePlaylistUrl';\nimport escapeRegExp from '../lib/escapeRegExp';\nimport SpotifyTimer from '../components/SpotifyTimer';\nimport FiltersButton from '../components/FiltersButton';\nimport Filters from '../components/Filters';\nimport Playlist from '../components/Playlist';\nimport Pagination from '../components/Pagination';\nimport { REFRESH_INTERVAL } from '../constants';\nimport '../styles/home.scss';\n\nclass Home extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: '',\n            playlist: [],\n            filteredPlaylists: null,\n            filters: {\n                country: 'BR',\n                timestamp: moment().format(),\n                limit: 4,\n                offset: 0,\n            },\n            showFilters: false,\n            pagination: {\n                limit: 0,\n                next: null,\n                offset: 0,\n                previous: null,\n                total: 0,\n            },\n            refreshRef: null,\n            isFiltersLoaded: false,\n            isPlaylistsLoaded: false,\n        }\n\n        this.initRefreshPlaylists = this.initRefreshPlaylists.bind(this);\n    }\n\n    componentDidMount() {\n        this.playlistAPI(this.state.filters);\n        this.initRefreshPlaylists();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.state.refreshRef);\n      }\n\n    initRefreshPlaylists() {\n        const refreshRef = setInterval(() => {\n            this.playlistAPI(this.state.filters);\n        }, REFRESH_INTERVAL);\n\n        this.setState({ refreshRef });\n    }\n\n    playlistAPI(filters) {\n        this.setState({ isPlaylistsLoaded: false });\n\n        return playlistService(filters)\n        .then(rsp => {\n            if (rsp.status === 401) {\n                localStorage.removeItem('access-token');\n                this.props.history.push(`${process.env.PUBLIC_URL}/`);\n            }\n\n            return rsp.json();\n        })\n        .then(data => {\n            if (data && data.error) {\n                toast.error(data.error.message);\n            } else {\n                const {\n                    limit,\n                    next,\n                    offset,\n                    previous,\n                    total,\n                    items,\n                } = data.playlists;\n\n                this.setState({\n                    message: data.message,\n                    playlist: items,\n                    filteredPlaylists: null,\n                    filters: {\n                        ...filters,\n                    },\n                    pagination: {\n                        limit,\n                        next,\n                        offset,\n                        previous,\n                        total,\n                    }\n                });\n            }\n\n            this.setState({ isPlaylistsLoaded: true });\n        })\n        .catch(err => console.error(err));\n\n    }\n\n    handleLoadingFilters(isLoaded) {\n        this.setState({\n            isFiltersLoaded: isLoaded,\n        });\n    }\n\n    handleFilter(key, value) {\n        const filters = {\n            ...this.state.filters,\n            [key]: value,\n        };\n\n        this.playlistAPI(filters);\n    }\n\n    handleFiltersButton() {\n        this.setState({ showFilters: !this.state.showFilters });\n    }\n\n    handlePagination(url) {\n        const filters = parsePlayListUrl(url);\n        this.playlistAPI(filters);\n    }\n\n    handleFilterByName = (value) => {\n        if (value === '') {\n            this.setState({ filteredPlaylists: null });\n            return;\n        }\n\n        const { playlist } = this.state;\n        const filteredPlaylists = playlist\n            .filter((item) => item.name.toLowerCase().search(escapeRegExp(value).toLowerCase()) !== -1);\n\n        this.setState({ filteredPlaylists });\n    }\n\n    render() {\n        const {\n            playlist,\n            filters,\n            message,\n            pagination,\n            showFilters,\n            filteredPlaylists,\n            isFiltersLoaded,\n            isPlaylistsLoaded,\n        } = this.state;\n\n        const homeFiltersCSS = classNames(\n            'app-home__filters',\n            { 'is-loaded': isFiltersLoaded }\n        );\n\n        const homePlaylistsCSS = classNames(\n            'app-home__playlist',\n            { 'is-loaded': isPlaylistsLoaded }\n        );\n\n        return(\n            <div className=\"app-home\">\n                <SpotifyTimer />\n                <ToastContainer autoClose={3000} />\n                {\n                    showFilters &&\n                    <section className={ homeFiltersCSS }>\n                        <Filters\n                            handleFilter={ this.handleFilter.bind(this) }\n                            handleFilterByName={ this.handleFilterByName.bind(this) }\n                            filtersValues={ filters }\n                            loaded={ this.handleLoadingFilters.bind(this) }\n                        />\n                    </section>\n                }\n                <section className=\"app-home__filters-btn\">\n                    <FiltersButton\n                        onClick={ this.handleFiltersButton.bind(this) }\n                        show={ showFilters }\n                    />\n                </section>\n                <section className={ homePlaylistsCSS }>\n                    <h1 className=\"app-home__playlist-name\">\n                        { message }\n                    </h1>\n                    <Playlist\n                        playlist={ filteredPlaylists ? filteredPlaylists : playlist }\n                    />\n                    {\n                        !filteredPlaylists &&\n                        <Pagination\n                            { ...pagination }\n                            onClick={ this.handlePagination.bind(this) }\n                        />\n                    }\n                </section>\n            </div>\n        );\n    }\n};\n\nexport default Home;\n","import { SPOTIFY_FEATURED_PLAYLIST } from '../constants';\n\n// Reference\n// https://developer.spotify.com/documentation/web-api/reference/browse/get-list-featured-playlists/\n\nexport default params => {\n    const {\n        country,\n        limit,\n        timestamp,\n        offset,\n    } = params;\n\n    const urlParams = `country=${ country }&limit=${ limit }&timestamp=${ timestamp }&offset=${ offset }`\n    const accessToken = localStorage.getItem('access-token');\n    const options = {\n        headers: {\n            Authorization: `Bearer ${accessToken}`\n        },\n    };\n\n    return fetch(`${ SPOTIFY_FEATURED_PLAYLIST }?${ urlParams }`, options);\n};\n","import qs from 'qs';\n\nexport default url => {\n    const params = url.split('?');\n    const {\n        country,\n        limit,\n        offset,\n        timestamp,\n    } = qs.parse(params[1]);\n\n    return {\n        country,\n        timestamp,\n        offset: parseInt(offset),\n        limit: parseInt(limit),\n    };\n};\n","import React, { PureComponent } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport getTokenFromHash from '../lib/getTokenFromHash';\nimport { APP_NAME, SPOTIFY_URL, SPOTIFY_AUTHORIZE } from '../constants';\nimport '../styles/login.scss';\n\nclass Login extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasRedirect: false,\n        };\n    }\n\n    componentDidMount() {\n        const { history } = this.props;\n        const { from } = this.props.location.state;\n        const newToken = from.hash !== '' ? getTokenFromHash(from.hash) : null;\n\n        if (newToken) {\n            localStorage.setItem('access-token', newToken);\n            history.push(`${process.env.PUBLIC_URL}/`);\n            this.setState({ hasRedirect: true });\n        }\n    }\n\n    render() {\n        const { from } = this.props.location.state;\n        const { hasRedirect } = this.state;\n\n        if (hasRedirect) return <Redirect to={ from } />;\n\n        return(\n            <div className=\"app-login\">\n                <h1 className=\"app-login__title\">\n                    Bem vinda(o) ao { APP_NAME }\n                </h1>\n                <p className=\"app-login__description\">\n                    Para explorar nossa experiência, você precisa ter uma conta no Spotify.\n                </p>\n                <p className=\"app-login__disclaimer\">\n                    Não tem uma conta no Spotify? <a href={ SPOTIFY_URL } className=\"app-login__link\">Criar uma conta</a>.\n                </p>\n                <a href={ SPOTIFY_AUTHORIZE } className=\"app-login__btn\">\n                    Logar com o Spotify\n                </a>\n            </div>\n        )\n    }\n};\n\nexport default Login;\n","import qs from 'qs';\n\nexport default hash => {\n    const token = qs.parse(hash)['#access_token'];\n    return token;\n}\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport bg from '../static/404.png';\nimport '../styles/notfound.scss';\n\nexport default () => (\n    <div className=\"app-notfound\">\n        <h1 className=\"app-notfound__title\">Página não encontrada!</h1>\n        <img className=\"app-notfound__img\" src={bg} alt=\"Página não encontrada\" />\n        <Link className=\"app-notfound__link\" to=\"/\">Página Inicial</Link>\n    </div>\n);\n","import React from 'react';\nimport {\n    Route,\n    Redirect,\n  } from \"react-router-dom\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    const accessToken = localStorage.getItem('access-token');\n\n    return (\n      <Route\n        {...rest}\n        render={props =>\n            accessToken ? (\n            <Component {...props} />\n          ) : (\n            <Redirect\n              to={{\n                pathname: `${process.env.PUBLIC_URL}/login`,\n                state: { from: props.location }\n              }}\n            />\n          )\n        }\n      />\n    );\n  }\n\nexport default PrivateRoute;\n","import React from 'react';\nimport '../styles/switch-theme.scss';\n\nconst handleClick = () => {\n    // TODO: Save localstorage\n    document.body.classList.toggle('dark');\n};\n\nconst SwitchTheme = () => {\n    return (\n        <button className=\"switch-theme\" onClick={ handleClick }>\n            Trocar Tema\n        </button>\n    );\n};\n\nexport default SwitchTheme;\n","import React from 'react';\nimport logo from '../static/spotifood.svg';\nimport SwitchTheme from './SwitchTheme';\nimport { APP_NAME } from '../constants';\nimport '../styles/header.scss';\n\nconst Header = () => (\n    <header className=\"header\">\n        <img src={ logo } alt={ APP_NAME } />\n        <SwitchTheme />\n    </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n  } from \"react-router-dom\";\nimport Home from '../pages/Home';\nimport Login from '../pages/Login';\nimport NotFound from '../pages/NotFound';\nimport PrivateRoute from './PrivateRoute';\nimport Header from './Header';\nimport '../styles/app.scss';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router>\n                <main className=\"app-main\">\n                    <Header />\n                    <Switch>\n                        <Route path={ `${process.env.PUBLIC_URL}/login` } component={Login} />\n                        <PrivateRoute exact path={ `${process.env.PUBLIC_URL}/` } component={ Home } />\n                        <Route component={ NotFound } />\n                    </Switch>\n                </main>\n            </Router>\n        );\n    }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/404.b2e41480.png\";","module.exports = __webpack_public_path__ + \"static/media/spotifood.e6c8b4e8.svg\";"],"sourceRoot":""}